/* ----------------------------------------------------------------------
   LIGGGHTS - LAMMPS Improved for General Granular and Granular Heat
   Transfer Simulations

   LIGGGHTS is part of the CFDEMproject
   www.liggghts.com | www.cfdem.com

   Christoph Kloss, christoph.kloss@cfdem.com
   Copyright 2009-2012 JKU Linz
   Copyright 2012-     DCS Computing GmbH, Linz

   LIGGGHTS is based on LAMMPS
   LAMMPS - Large-scale Atomic/Molecular Massively Parallel Simulator
   http://lammps.sandia.gov, Sandia National Laboratories
   Steve Plimpton, sjplimp@sandia.gov

   This software is distributed under the GNU General Public License.

   See the README file in the top-level directory.
------------------------------------------------------------------------- */

#ifdef FIX_CLASS

FixStyle(particletemplate/multiplespheres,FixTemplateMultiplespheres)

#else

#ifndef LMP_FIX_TEMPLATE_MULTIPLESPHERES_H
#define LMP_FIX_TEMPLATE_MULTIPLESPHERES_H

#include "fix.h"
#include "fix_template_sphere.h"


namespace LAMMPS_NS {

class FixTemplateMultiplespheres : public FixTemplateSphere {
 public:
	  
	  

	  FixTemplateMultiplespheres(class LAMMPS *, int, char **);
	  virtual ~FixTemplateMultiplespheres();

	/*******************************************/  
//	  int ECS_flag_break_h;
//	  double ECS_iparticle_break_h;
//	  double size_iparticle_break_h;
	  
	  
/*	void getvalues_break_cpp(int ECS_flag, double ECS_iparticle, double size_iparticle)
		{
			ECS_flag_break_h = ECS_flag;
			ECS_iparticle_break_h = ECS_iparticle;
			size_iparticle_break_h = size_iparticle;
		}
*/
	/*********************************************************************************************************/
		double particle_density = 0.0;   //Will be used in fix_breakparticle_force.cpp for marking the particles for breakage
	/*********************************************************************************************************/
	/*******************************************/

	  virtual void post_create();
	  double max_r_bound();
	  double max_rad();
	  double min_rad();
	  int number_spheres();

/*****************************************************************************************************/
/*		int number_particles_inserted = 0; 	 //total number of particles generated by breakage of one particle of size of size_iparticle
		double mass_particles_inserted = 0;		//total number of particles generated by breakage of one particle of size of size_iparticle
		double volume_particles_inserted = 0;		//total number of particles generated by breakage of one particle of size of size_iparticle
*/	
 



	  // single insertion
	  virtual void randomize_single();

	  // multi insertion
	  virtual void init_ptilist(int);
	  void randomize_ptilist(int ,int );

	  virtual void finalize_insertion() {}
  


 protected:

	

	  // template calculations
	  virtual void calc_bounding_sphere();
	  virtual void calc_center_of_mass();

	  // sqr distance from x_sphere[j] to xtest
	  double dist_sqr(int j,double *xtest);

	  // generate random point in bbox
	  void generate_xtry(double *xtry);

	  // number of spheres in template
	  int nspheres;

	  // coords of each sphere with respect to center of mass
	  double **x_sphere;    //values of positions will be copied from fragment file in these//

	  // radius of each sphere
	  double *r_sphere;		//radius values will be copied from fragment file in these//In ECS case values will be calculated and copied//
	 

	 
	  // scale factor if read from a file
	  double scale_fact;		//scaling factor provided in command "fix		fragments all particletemplate/multiplespheres 1 atom_type 1 density constant 2500 nspheres 10 ntry 1000000 &
																	//heres file fragmentfile scale 1.0" in breakage example//
	  // bounding box
	  double x_min[3], x_max[3];

	  // bounding sphere - radius and coordinates with respect to com
	  double r_bound;
	  double x_bound[3];

	  // radius of sphere with equal volume
	  double r_equiv;

	  // number of tries for mc
	  int ntry;
};

}

#endif
#endif
